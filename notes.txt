Magesh Kuppan

Schedule
    Session 01  : 3:30 hrs (with 20 mins tea break)
    Lunch       : 1 hr
    Session 02  : 3:30 hrs (with 20 mins tea break)

Methodology:
    No powerpoints

Repo:
    https://github.com/tkmagesh/vmware-golang2-oct-2022



/* 
program structure
data types
variables, constants, iota
control structures
errors
collections (arrays, slices & maps)
pointers
functions (anonymous, higher order)
structs (composition)
methods
interfaces
concurrency
modules & packages
*/

Executing a Go program
    go run <program.go>

Creating a build
    go build <program.go>

Cross Compilation
    Environment variables
        go env

    Environment variables for build
        GOOS, GOARCH

    To change the Environment variables
        go env -w var1=<val1> var2=<val2>

    To cross compile:
        GOOS=windows GOARCH=386 go build <program.go>

    To get the list of GOOS & GOARCH
        go tool dist list
    

Higher Order Functions
    Functions as first class objects (functions as data)
    - assign functions to variables
    - pass functions as arguments to other functions
    - return functions as return results
Variadic functions
    - 

Errors

Deferred Functions

Panic

Collections
    Array
        Fixed size collection 

    Slice
        Varying size collection
        Internally maintains a pointer to an array
        append()

    Map
        Key-Value pairs collection



Concurrency
    Channel data type
    <- (channel operator)

    var ch chan int
    ch = make(chan int)
    ch <- 100 // => send operation
    result := <-ch // => receive operation

    Channels
    Receive Operation is ALWAYS a blocking operation
    Send Operation is blocked until a receive operation is initiated (conditions apply)
        OR Send Operation can succeed only if a Receive operation is already initiated


Before Go 1.13
    GOPATH
        bin
        pkg
        src
            /github.com
                /vmware
                    /my-app
                        import "github.com/vmware/pkg-1"
                    /pkg-1
                    /pkg-2

In Go 1.13 - modules were introduced
    go.mod
        minimum go version
        module name (github.com/vmware/my-app)
        dependencies

    packages
        folders

To create a mod file
    go mod init <module_name>

to execute a module
    go run .

to create a build
    go build .

to install 3rd party modules
    go get <module>

to sync the go.mod file
    go mod tidy

to download the dependencies into the mod cache
    go mod download

to localize the dependencies (in the vendor folder)
    go mod vendor

to install go binaries (installed in the GOPATH/bin folder)
    go install <module>

Other useful commands
    go mod graph
    go mod why


RESTful Service
    Application
        process http requests

    REST
        - Data as a resource
        - Where?
            URL
        - Operations?
            Http Methods
        - Data Format?
            JSON
        - Response?
            HTTP Status Codes

Http Server
    



GRPC
    Communication Patterns
        Request & Response
        Server Streaming
        Client Streaming
        Bidirectional Streaming

    Contracts (protocol buffers)
        Service Contract
        Operation Contracts
        Message Contracts

    Generate the proxy & stub

    Server
        Implement the service (using the stub)
        host the service

    Client
        Communicate to the server using the proxy

    GRPC Tools
     Installation
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        (when the above is installed, executables are created in the gopath/bin folder. Make sure this path is set in environment variables)

        Windows
            Install the binaries from https://github.com/protocolbuffers/protobuf/releases/

        Mac
            brew install protoc-gen-go
            brew install protoc-gen-go-grpc

        Verification
            protoc --version

        To generate the proxy and stub
            protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto






Glen
    pointers
    Using & Designing interfaces
    Concurrency

Kevin & Ramesh
    Testing
    Higher Order Functions

Zach
    Type System
    Testing

Paul
    Concurrency, 
    testing, 
    managing state, 
    packaging, 
    deploying, 
    profiling, 
    web services
